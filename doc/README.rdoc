== SimpleVM Goals
    * Booleans - Basic C bool
    * Logical branching - C/Python if statement
    * Logical And - And by bits
    * Logical Or -  Or by bits
    * Logical Not - Not by bits
    * Logical XOR - XOR by bits.. gotta have it for major bitwhackin'
    * Bitshift Right
    * Bitshift Left
    * Assignment - non-typesafe memory to memory copy
    * Integers - Signed 32-bit integers
    * Pointer - Same as a C pointer
    * Arrays - Basic C-style continuous memory block of either integers or booleans
    * Stacks - Basic FIFO que of pointers
    * STDIN/STDOUT IO

== Parse Structure
As this code is supposed to simulate the runtime environment
of a very low-level processor, there are very few "builtin"
features and the set of keywords is minimal. Keyword
declaration is also not possible, subroutines and functions
are accomplished purely with raw stacks and are expected
to be emulated by a compiler, not written by hand.
General Structure:
    &optcode [&opt [&opt [&opt [&opt]]]]]
where &optcode is a string of length four chars or less
terminated with a space and defined in the Bytecode Spec
later in this document. Each &opt is a string of length
n < 6 which is the name of a defined memory block.

The VM itself is CASE-INSENSITVE when it comes to variable
names and keywords, but the standard is for uppercase
as that is what the VM coerces to during code execution.

Note on optcodes - optcodes may NOT be overloaded.
While traditionally some verbs such as "<<" and ">>" may
be applied to multiple types of objects, for simplicity
SimpleVM does not support type inference as such. At
least in v1. At runtime, the VM will do type checking
to ensure that the parameters' types match and errors
will be thrown if they are inappropriate.

= Bytecode Spec

Syntax note: Below I us "N1", "N2", "N3" etc. to refer to the arguments
of various operations. Please remember that this is a working spec and
by no means represents a formal grammar or typeset which is guaranteed
to be implemented in full whenever Simple VM makes 1.0

All of these tables are notes to myself on functionality which I wish
to implement and the rough syntax which I plan to use therefor.

== Integers
    OpCode   | Args      | Description
    ---------+-----------+--------------
    ADD      | N1 N2 N3  | N3 := N1 + N2
    SUB      | N1 N2 N3  | N3 := N1 - N2
    MUL      | N1 N2 N3  | N3 := N1 * N2
    DIV      | N1 N2 N3  | N3 := N1 / N2
    MOD      | N1 N2 N3  | N3 := N1 % N2
    INCR     | N1        | add one
    DECR     | N1        | subtract one


== System
System opcodes are for the most part type-insensitive
or perform untyped operations.

    OpCode   | Args      | Description
    ---------+-----------+-------------------------------------------
    SWAP     | N1 N2     | swaps the values at N1, N2. Type unsafe.
    MCPY     | N1 N2     | raw memory copy of N1 to N2. Type unsafe.
    DEL      | N1        | raw memory delete of whatever N1 points to.
    HALT     |           | Term. execution

== Logic & Binary
    OpCode   | Args      | Description
    ---------+-----------+-------------------------------------------
    OR       | N1 N2 N3  | N3 := N1 || N2
    AND      | N1 N2 N3  | N3 := N1 && N2
    NOT      | N1 N3     | N3 := !N1
    XOR      | N1 N2 N3  | N3 :=(N1 & !N2) || (!N1 & N2)
    RSFT     | N1        | shifts the value at N1 right one bit, truncating for space and padding with 0
    LSFT     | N1        | shifts the value at N1 left one bit, truncating for space and padding with 0

== Pointers
Within SimpleVM, pointers are untyped references to some block of
memory. As in C, pointers are simply integer data with a few operations
(here only two) which will serve to 

    OpCode   | Args      | Description
    ---------+-----------+-------------------------------------------
    rget     | N1 N2     | regs[N2] = regs[regs[N1]] (pointer dereference)
    rset     | N1 N2     | regs[regs[N1]] = regs[N2] (pointer write)


== Flow Control
Obviously I want my final language to be Turing-complete, so flow control
statements are a must. SimpleVM will support the following basic forms of
branching:

    OpCode   | Args      | Description
    ---------+-----------+-------------------------------------------
    GOTOL    | N1        | moves the execution cursor to line number N1
    GOTOR    | N1        | moves the execution cursor to the line indicated by the value at register N1
    IF       | N1        | moves the execution cursor +1 if the value at register N1 > 0, else cursor += 2

== Input/Output
What good is the VM if all it can do is crunch numbers? Printing is where it's at.

    OpCode   | Args      | Description
    ---------+-----------+-------------------------------------------
    PUTI     | N1        | prints the value of register N1 as an integer
    PUTC     | N1        | prints the value of register N1 as a character code
    GETI     | N1        | reads an integer into register N1
    GETC     | N1        | reads a character code into register N1
    DSP      |           | dumps the VM's RAM to STDOUT
    DUMP     |           | dumps the VM's program code to STDOUT
