= Memory Model
== Overview
Just a quick executive summary of the memory system covering the basic
void pointer container and the integer indexing scheme which makes
everything really easy.

== Details
The biggest sticking point for me in writing an implementation of this
spec was a lack of a clear memory model for the final virtual machine.
This makes the mechanics of the pointers and other memory-dependent
features undefined and impossible to implement.

Inefficient as it may be, this VM in the 1.0 version at
any rate will be based on a single linear array of type
VMData. The VMData struct (raw c) has a void pointer to some
block of memory defined at initialization time, an integer
flag which states internal type (int/float/bool/ptr.).
Scope does not exist as far as the actual VM is
concerned, all variables are globals. This makes memory
management for the VM a real breeze, but makes memory
leaks a very serious potential problem.

== Allocate Memory
The allocation operation is really easy.. figure out
how many blocks of memory will be required to store the
new data/literal, increment the counter to the last
un-used memory cell and perform the requisite
assignment operations on the memory to hand.

With some probability, it will me necessary to allocate
a new, bigger array and copy over the old elements. This
case must be accounted for.

== Deallocate Memory
Deallocation is slightly harder and certainly more
expensive as an operation, but is also comparatively
trivial. The deallocation operation is performed on an
index of the VM's memory. That index is "deleted" by
overwriting by shifting all the other memory to the
right of the target index left by the number of deleted
indices.

((*WARNING*)) - the memory to which the deleted node's
void pointer refers must be dealloc'd,
otherwise the VM will leak memory with each delete op.

((*SPECIAL CASE*)) - Somehow arrays have to be
accounted for. While I have yet to author a similarly
vague yet implementable spec for arrays, my mental
sketch therefore suggests that a dealloc operation on an
array will receive only a pointer to the "head" of the
array. The ENTIRE array must be iteratively deleted as
a series of nodes, so it would make sense to delay the
left shift as long as possible lest you perform o(n)
shifts on m data points.... not cheap. By delaying the
compacting operation we can make deletion O(N+M) not
O(N*M)
